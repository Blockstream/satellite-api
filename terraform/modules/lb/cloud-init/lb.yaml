users:
  - name: bs
    uid: 2000

write_files:
  - path: /home/bs/default.conf
    permissions: 0644
    owner: root
    content: |
        log_format withtime '$remote_user [$time_local] '
                            '"$request" $status $body_bytes_sent '
                            '"$http_referer" "$http_user_agent" '
                            'rt="$request_time" uct="$upstream_connect_time" uht="$upstream_header_time" urt="$upstream_response_time"';

        server {
            access_log /var/log/nginx/access.log withtime;
            error_log /var/log/nginx/error.log;
            root /usr/share/nginx/html/;

            server_name ${host};
            listen 80;
            server_tokens off;
            proxy_set_header X-Forwarded-For 0.0.0.0;

            location / {
                rewrite ^ https://$http_host$request_uri? permanent;
            }

            location /.well-known {
                auth_basic off;
                allow all; # Allow all to see content
                proxy_pass ${public_bucket_url}/certs/.well-known;
            }

            location /healthz {
                return 200;
            }
        }

  - path: /home/bs/default-tls.conf
    permissions: 0644
    owner: root
    content: |
        log_format withtime '$remote_user [$time_local] '
                            '"$request" $status $body_bytes_sent '
                            '"$http_referer" "$http_user_agent" '
                            'rt="$request_time" uct="$upstream_connect_time" uht="$upstream_header_time" urt="$upstream_response_time"';

        server {
            index index.php index.html index.htm index.nginx-debian.html;

            access_log /var/log/nginx/access.log withtime;
            error_log /var/log/nginx/error.log;

            server_name ${host};
            listen 443 ssl default_server;
            ssl_certificate /etc/nginx/certs/live/${host}/fullchain.pem;
            ssl_certificate_key /etc/nginx/certs/live/${host}/privkey.pem;
            ssl_prefer_server_ciphers on;
            ssl_dhparam /etc/nginx/certs/certs/dhparam.pem;

            ssl_client_certificate /etc/nginx/certs/ca.cert;
            ssl_verify_client optional;

            root /usr/share/nginx/html/;
            server_tokens off;
            proxy_set_header X-Forwarded-For 0.0.0.0;

            location = / {
                rewrite ^ /index.html break;
            }

            # Client cert authenticated endpoints
            location /order/tx/ {
                # Allow base stations only
                allow ${station1};
                allow ${station2};
                deny all;

                if ($ssl_client_verify != SUCCESS) {
                  return 403;
                }
                proxy_pass http://${mainnet_ip}:9292/order/tx/;
            }

            location /order/rx/ {
                # Allow base stations only
                allow ${station1};
                allow ${station2};
                deny all;

                if ($ssl_client_verify != SUCCESS) {
                  return 403;
                }
                proxy_pass http://${mainnet_ip}:9292/order/rx/;
            }

            # Proxy to mainnet Satellite API
            location / {
                add_header 'Access-Control-Allow-Origin' '*' always;
                add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, DELETE' always;
                add_header 'Access-Control-Allow-Headers' 'X-Auth-Token,DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range' always;
                add_header 'X-XSS-Protection' '1; mode=block' always;

                if ($request_uri ~* "^/$")
                {
                  return 301 https://$host;
                }

                if ($request_method = 'OPTIONS')
                {
                  return 200;
                }

                proxy_pass http://${mainnet_ip}:9292/;
            }

            # Proxy to mainnet SSE container
            location /subscribe/ {
                chunked_transfer_encoding off;
                proxy_buffering off;
                proxy_request_buffering off;
                proxy_cache off;
                proxy_http_version 1.1;

                proxy_pass http://${mainnet_ip}:4500/stream?channels=;
            }

            # Proxy to testnet Satellite API
            location /testnet/ {
                add_header 'Access-Control-Allow-Origin' '*' always;
                add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, DELETE' always;
                add_header 'Access-Control-Allow-Headers' 'X-Auth-Token,DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range' always;
                add_header 'X-XSS-Protection' '1; mode=block' always;

                if ($request_uri ~* "^/testnet/?$")
                {
                  return 301 https://$host;
                }

                if ($request_method = 'OPTIONS')
                {
                  return 200;
                }

                proxy_pass http://${testnet_ip}:9292/;
            }

            # Proxy to testnet SSE container
            location /testnet/subscribe/ {
                chunked_transfer_encoding off;
                proxy_buffering off;
                proxy_request_buffering off;
                proxy_cache off;
                proxy_http_version 1.1;

                proxy_pass http://${testnet_ip}:4500/stream?channels=;
            }

            # Proxy to Gossip
            location /gossip/ {
                add_header 'Access-Control-Allow-Origin' '*' always;
                add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, DELETE' always;
                add_header 'Access-Control-Allow-Headers' 'X-Auth-Token,DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range' always;
                add_header 'X-XSS-Protection' '1; mode=block' always;

                if ($request_uri ~* "^/gossip/?$")
                {
                  return 301 https://$host;
                }

                if ($request_method = 'OPTIONS')
                {
                  return 200;
                }

                proxy_pass http://${gossip_ip}:9292/;
            }

            # Proxy to gossip SSE container
            location /gossip/subscribe/ {
                chunked_transfer_encoding off;
                proxy_buffering off;
                proxy_request_buffering off;
                proxy_cache off;
                proxy_http_version 1.1;

                proxy_pass http://${gossip_ip}:4500/stream?channels=;
            }

            # Only the ground station hosts are authorized to send and modify
            # API transmission orders on the gossip server
            location ~ ^/gossip/order($|/.*)$ {
                # Allow up to 2MB uploads
                client_max_body_size 2M;

                # Allow base stations only
                allow ${station1};
                allow ${station2};
                deny all;

                if ($ssl_client_verify != SUCCESS) {
                  return 403;
                }
                proxy_pass http://${gossip_ip}:9292/order$1;
            }

            # Proxy to the authentication server
            location ~ ^/auth/order($|/.*)$ {
                # Restrict all auth server endpoints to local subnets only
                allow 127.0.0.1;
                allow 10.0.0.0/8;
                deny all;

                proxy_pass http://${auth_ip}:9292/order$1;
            }

            location /auth/ {
                add_header 'Access-Control-Allow-Origin' '*' always;
                add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, DELETE' always;
                add_header 'Access-Control-Allow-Headers' 'X-Auth-Token,DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range' always;
                add_header 'X-XSS-Protection' '1; mode=block' always;

                if ($request_uri ~* "^/auth/?$")
                {
                  return 301 https://$host;
                }

                if ($request_method = 'OPTIONS')
                {
                  return 200;
                }

                # Restrict all auth server endpoints to the ground station hosts
                # authenticated via client-side SSL cert
                allow ${station1};
                allow ${station2};
                deny all;

                if ($ssl_client_verify != SUCCESS) {
                  return 403;
                }

                proxy_pass http://${auth_ip}:9292/;
            }

            # Proxy to auth server's SSE container
            location /auth/subscribe/ {
                chunked_transfer_encoding off;
                proxy_buffering off;
                proxy_request_buffering off;
                proxy_cache off;
                proxy_http_version 1.1;

                allow ${station1};
                allow ${station2};
                deny all;

                if ($ssl_client_verify != SUCCESS) {
                  return 403;
                }

                proxy_pass http://${auth_ip}:4500/stream?channels=;
            }

            # Proxy to the Bitcoin source code transmission server
            location /btc-src/ {
                add_header 'Access-Control-Allow-Origin' '*' always;
                add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, DELETE' always;
                add_header 'Access-Control-Allow-Headers' 'X-Auth-Token,DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range' always;
                add_header 'X-XSS-Protection' '1; mode=block' always;

                if ($request_uri ~* "^/btc-src/?$")
                {
                  return 301 https://$host;
                }

                if ($request_method = 'OPTIONS')
                {
                  return 200;
                }

                proxy_pass http://${btc_src_ip}:9292/;
            }

            # Proxy to btc-src's SSE container
            location /btc-src/subscribe/ {
                chunked_transfer_encoding off;
                proxy_buffering off;
                proxy_request_buffering off;
                proxy_cache off;
                proxy_http_version 1.1;

                proxy_pass http://${btc_src_ip}:4500/stream?channels=;
            }

            # Only the ground station hosts are authorized to send and modify
            # API transmission orders on the btc-src server
            location ~ ^/btc-src/order($|/.*)$ {
                # Allow up to 2MB uploads
                client_max_body_size 16M;

                allow ${station1};
                allow ${station2};
                deny all;

                if ($ssl_client_verify != SUCCESS) {
                  return 403;
                }
                proxy_pass http://${btc_src_ip}:9292/order$1;
            }
        }

  - path: /home/bs/index.html
    permissions: 0644
    owner: root
    content: |
        <html>
        <body>
        <title>Blockstream Satellite API</title>

        <h3>This is our fancy default page. Here are some interesting places worth exploring:</h3>
        <b>
        <p>Learn more: <a href="https://blockstream.com/satellite-api-documentation/" target="_blank">Satellite API Docs</a></p>
        <p>Contribute: <a href="https://github.com/blockstream/satellite-api" target="_blank">Satellite API Code</a></p></b>
        <h4>Mainnet:</h4>
        https://api.blockstream.space
        <h4>Testnet (replacement for https://satellite.blockstream.com/api):</h4>
        https://api.blockstream.space/testnet
        <h4>If you're trying to use Tor, make sure you're using the right path. For example:</h4>
        http://btcspaceda7iejsrb7ihmi5si3hhssxxxdnqvvtyz6prv2m73j7lcoqd.onion/testnet/info

        </body>
        </html>

  - path: /etc/systemd/system/nginx-tls.service
    permissions: 0644
    owner: root
    content: |
        [Unit]
        Description=Nginx redirect
        Wants=gcr-online.target
        After=ionosphere.service

        [Service]
        Restart=always
        RestartSec=3
        Environment=HOME=/home/bs
        ExecStartPre=/sbin/iptables -A INPUT -m tcp -p tcp --dport 443 -j ACCEPT
        ExecStart=/usr/bin/docker run \
            --network=host \
            --pid=host \
            --name=nginx-tls \
            --log-opt max-size=200m \
            --log-opt max-file=3 \
            -v /home/bs/default-tls.conf:/etc/nginx/conf.d/default.conf:ro \
            -v /home/bs/index.html:/usr/share/nginx/html/index.html:ro \
            -v /home/bs/certs:/etc/nginx/certs:ro \
            "nginx:latest"
        ExecStop=/usr/bin/docker stop nginx-tls
        ExecStopPost=/usr/bin/docker rm nginx-tls
        ExecStopPost=/sbin/iptables -D INPUT -m tcp -p tcp --dport 443 -j ACCEPT

  - path: /etc/systemd/system/nginx.service
    permissions: 0644
    owner: root
    content: |
        [Unit]
        Description=Nginx redirect
        Wants=gcr-online.target
        After=ionosphere.service

        [Service]
        Restart=always
        RestartSec=3
        Environment=HOME=/home/bs
        ExecStartPre=/sbin/iptables -A INPUT -m tcp -p tcp --dport 80 -j ACCEPT
        ExecStart=/usr/bin/docker run \
            --network=host \
            --pid=host \
            --name=nginx \
            --log-opt max-size=200m \
            --log-opt max-file=3 \
            -v /home/bs/default.conf:/etc/nginx/conf.d/default.conf:ro \
            -v /home/bs/index.html:/usr/share/nginx/html/index.html:ro \
            "nginx:latest"
        ExecStop=/usr/bin/docker stop nginx
        ExecStopPost=/usr/bin/docker rm nginx
        ExecStopPost=/sbin/iptables -D INPUT -m tcp -p tcp --dport 80 -j ACCEPT

  - path: /etc/systemd/system/cert-downloader.service
    permissions: 0644
    owner: root
    content: |
        [Unit]
        Description=Run cert-downloader
        Wants=gcr-online.target
        After=nginx-tls.service

        [Service]
        Type=oneshot
        RemainAfterExit=true
        Environment=HOME=/home/bs
        ExecStartPre=/usr/bin/docker-credential-gcr configure-docker
        ExecStart=/usr/bin/docker run \
            --name=cert-downloader \
            --tmpfs /root \
            --tmpfs /tmp \
            --rm \
            -v /home/bs/certs:/etc/letsencrypt:rw \
            -e GCS_PUBLIC_BUCKET=${public_bucket} \
            -e GCS_PRIVATE_BUCKET=${private_bucket} \
            -e DOMAIN=${host} \
            "${certbot_docker}" download

  - path: /etc/systemd/system/cert-renewer.timer
    permissions: 0644
    owner: root
    content: |
        [Unit]
        Description=Run full cert-renewer every 24 hours

        [Timer]
        OnBootSec=5m
        OnUnitActiveSec=24h
        Persistent=true

        [Install]
        WantedBy=timers.target

  - path: /etc/systemd/system/cert-renewer.service
    permissions: 0644
    owner: root
    content: |
        [Unit]
        Description=Run cert-renewer
        Wants=gcr-online.target
        After=gcr-online.target

        [Service]
        Type=oneshot
        Environment=HOME=/home/bs
        ExecStartPre=/usr/bin/docker-credential-gcr configure-docker
        ExecStart=/usr/bin/docker run \
            --name=cert-renewer \
            --tmpfs /root \
            --tmpfs /tmp \
            --rm \
            -v /home/bs/certs:/etc/letsencrypt:rw \
            -e GCS_PUBLIC_BUCKET=${public_bucket} \
            -e GCS_PRIVATE_BUCKET=${private_bucket} \
            -e DOMAIN=${host} \
            -e EMAIL=${letsencrypt_email} \
            "${certbot_docker}" renew
        ExecStartPost=-/usr/bin/docker exec nginx-tls nginx -s reload

  - path: /etc/systemd/system/node-exporter.service
    permissions: 0644
    owner: root
    content: |
        [Unit]
        Description=Prometheus node-exporter
        Wants=gcr-online.target docker.service
        After=gcr-online.service docker.service

        [Service]
        Restart=always
        RestartSec=3
        Environment=HOME=/home/bs
        ExecStartPre=/usr/bin/docker pull ${node_exporter_docker}
        ExecStartPre=/sbin/iptables -A INPUT -m tcp -p tcp --dport 9100 -j ACCEPT
        ExecStart=/usr/bin/docker run \
            --name=node-exporter \
            --network=host \
            --read-only \
            -v /proc:/host/proc:ro \
            -v /sys:/host/sys:ro \
            -v /:/rootfs:ro \
            -v metrics:/metrics:ro \
            -v /var/run/dbus/system_bus_socket:/var/run/dbus/system_bus_socket:ro \
            "${node_exporter_docker}" --path.procfs /host/proc --path.sysfs /host/sys --collector.textfile.directory /metrics --collector.filesystem.ignored-mount-points "^/(sys|proc|dev|host|etc($|/))" --collector.systemd
        ExecStop=/usr/bin/docker stop node-exporter
        ExecStopPost=/usr/bin/docker rm node-exporter
        ExecStopPost=/sbin/iptables -D INPUT -m tcp -p tcp --dport 9100 -j ACCEPT

runcmd:
  - systemctl daemon-reload
  - systemctl enable --now cert-renewer.timer
  - systemctl enable --now cert-downloader.service
  - systemctl enable --now nginx.service
  - systemctl enable --now nginx-tls.service
  - systemctl enable --now node-exporter.service
